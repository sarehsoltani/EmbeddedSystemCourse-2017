#include <MKL25Z4.H>
void setCSOutput(void);
struct State {
  uint32_t Out[18]; 
  uint32_t Time; 
  uint32_t Next; 
}; 
typedef const struct State STyp;
uint32_t CS;  
uint32_t Input; 
  
#define go_N_car_go_BRT_NS   0
#define go_N_car_wait_BRT_N_S 1
#define goW_stop_Brt_goN_car   2
#define waitW_waitN_car_stop_Brt   3
#define goE_car_goW_Bus   4
#define waitBus_waitWN 5
#define stopBus_goWN_goE 6
#define stopBus_waitE_waitWN 7

STyp FSM[8] = {
 {{1,0,0,1,0,0,0,0,1,0,0,1,0,0,1,0,0,1}, 20000, go_N_car_wait_BRT_N_S}, 
 {{1,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,1,0}, 5000,  goW_stop_Brt_goN_car},
 {{1,0,0,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0}, 10000, waitW_waitN_car_stop_Brt},
 {{0,1,0,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0}, 5000,  goE_car_goW_Bus},
 {{0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,1}, 20000, waitBus_waitWN},
 {{0,0,1,0,0,1,1,0,0,0,1,0,0,1,0,0,0,1}, 5000,  stopBus_goWN_goE},
 {{0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1}, 10000, stopBus_waitE_waitWN},
 {{0,1,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,1}, 5000,  go_N_car_go_BRT_NS}
};

void delay(unsigned int length_ms)
{
   SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK; 
   LPTMR0_CSR = 0;                  
   LPTMR0_CMR = length_ms;           
   LPTMR0_PSR = LPTMR_PSR_PCS(1) | LPTMR_PSR_PBYP_MASK;

   LPTMR0_CSR = LPTMR_CSR_TEN_MASK;
   while (!(LPTMR0_CSR & LPTMR_CSR_TCF_MASK));
   LPTMR0_CSR = 0;                     
 }

void init_switch(void){
  //enable clk  D, A, C
  SIM->SCGC5 |= 0x1A00; 
  //set D0 , D1 to GPIO(MUX=001 IN PCREG),IRQC(19:16)=1010I=>Interrupt on falling edge, PE=1 &PS=0 
  PORTD -> PCR[0] |= 0xA0102;
  PORTD -> PCR[1] |= 0xA0102;
	PORTD -> PCR[2] |= 0xA0102;
	PORTD -> PCR[3] |= 0xA0102;
 //interrupt 
  PTD ->PDDR |= (0<<0);
  PTD ->PDDR |= (0<<1);
	PTD ->PDDR |= (0<<2);
	PTD ->PDDR |= (0<<3);
  //set
  PTD ->PDOR |= (0<<0);
  PTD ->PDOR |= (0<<1);
	PTD ->PDOR |= (0<<2);
	PTD ->PDOR |= (0<<3);	
  
  PORTD_ISFR = PORT_ISFR_ISF(0x01);
  NVIC_SetPriority(PORTD_IRQn,128);
  NVIC_EnableIRQ(PORTD_IRQn);
}

void init_RGB_LEDs(void){
  //GPIO
  PORTC ->PCR[13] |= 0x0100;
  PORTC-> PCR[16] |= 0x0100;
  PORTC-> PCR[17] |= 0x0100;
	
  PORTA-> PCR[12] |= 0x0100;
  PORTA-> PCR[4] |= 0x0100;
  PORTA-> PCR[5] |= 0x0100;
	
	PORTC-> PCR[8] |= 0x0100;
	PORTC-> PCR[9] |= 0x0100;
	PORTA-> PCR[13] |= 0x0100;
	
	PORTC-> PCR[10] |= 0x0100;
	PORTC-> PCR[11] |= 0x0100;
	PORTC-> PCR[12] |= 0x0100;
	
	PORTC-> PCR[7] |= 0x0100;
	PORTC-> PCR[0] |= 0x0100;
	PORTC-> PCR[3] |= 0x0100;
	
	PORTC-> PCR[4] |= 0x0100;
	PORTC-> PCR[5] |= 0x0100;
	PORTC-> PCR[6] |= 0x0100;
  
	// OUTPUT : B18:REDLED B19:GREENLED D1:BLUELED
  PTC->PDDR |= (1<<13);
  PTC->PDDR |= (1<<16);
  PTC->PDDR |= (1<<17);
	
  PTA->PDDR |= (1<<12);
  PTA->PDDR |= (1<<4);
  PTA->PDDR |= (1<<5);

	PTC->PDDR |= (1<<8);
  PTC->PDDR |= (1<<9);
  PTA->PDDR |= (1<<13);

	PTC->PDDR |= (1<<10);
  PTC->PDDR |= (1<<11);
  PTC->PDDR |= (1<<12);
	
	PTC->PDDR |= (1<<7);
  PTC->PDDR |= (1<<0);
  PTC->PDDR |= (1<<3);
	
	PTC->PDDR |= (1<<4);
  PTC->PDDR |= (1<<5);
  PTC->PDDR |= (1<<6);
	
//SET 
  PTC->PDOR |= (0<<13);
  PTC->PDOR |= (0<<16);
  PTC->PDOR |= (0<<17);
	
  PTA->PDOR |= (0<<12);
  PTA->PDOR |= (0<<4);
  PTA->PDOR |= (0<<5);

	PTC->PDOR |= (0<<8);
  PTC->PDOR |= (0<<9);
  PTA->PDOR |= (0<<13);

	PTC->PDOR |= (0<<10);
  PTC->PDOR |= (0<<11);
  PTC->PDOR |= (0<<12);
	
	PTC->PDOR |= (0<<7);
  PTC->PDOR |= (0<<0);
  PTC->PDOR |= (0<<3);
	
	PTC->PDOR |= (0<<4);
  PTC->PDOR |= (0<<5);
  PTC->PDOR |= (0<<6);

}


void PORTD_IRQHandler(void)
{
  if(PORTD_ISFR & 0x01){
    // interrupt from north
				PTC->PDOR |= (1<<13);
				PTC->PDOR |= (0<<16);
				PTC->PDOR |= (0<<17);
				
				PTC->PDOR |= (0<<8);
				PTC->PDOR |= (0<<9);
				PTA->PDOR |= (1<<13);
				
				PTC->PDOR |= (0<<10);
				PTC->PDOR |= (0<<11);
				PTC->PDOR |= (1<<12);
				
				delay(5000);
				setCSOutput();	
  }
	
  if(PORTD_ISFR & 0x02){
    // interrupt from east
		//north
				PTC->PDOR |= (0<<13);
				PTC->PDOR |= (0<<16);
				PTC->PDOR |= (1<<17);
		//N/S Brt		
				PTA->PDOR |= (0<<12);
				PTA->PDOR |= (0<<4);
				PTA->PDOR |= (1<<5);
		//E
				PTC->PDOR |= (1<<8);
				PTC->PDOR |= (0<<9);
				PTA->PDOR |= (0<<13);
		//SW
				PTC->PDOR |= (0<<4);
				PTC->PDOR |= (0<<5);
				PTC->PDOR |= (1<<6);
		
				delay(5000);
				setCSOutput();	
  }
	
	if(PORTD_ISFR & 0x04){
		// interrupt from WN
		//north
				PTC->PDOR |= (1<<13);
				PTC->PDOR |= (0<<16);
				PTC->PDOR |= (0<<17);
		//N/S Brt		
				PTA->PDOR |= (0<<12);
				PTA->PDOR |= (0<<4);
				PTA->PDOR |= (1<<5);
		//E
				PTC->PDOR |= (0<<8);
				PTC->PDOR |= (0<<9);
				PTA->PDOR |= (1<<13);
		//WN
				PTC->PDOR |= (1<<7);
				PTC->PDOR |= (0<<0);
				PTC->PDOR |= (0<<3);		
	}
	if(PORTD_ISFR & 0x08){
		// interrupt from SW
		//north
				PTC->PDOR |= (1<<13);
				PTC->PDOR |= (0<<16);
				PTC->PDOR |= (0<<17);
		//N/S Brt		
				PTA->PDOR |= (0<<12);
				PTA->PDOR |= (0<<4);
				PTA->PDOR |= (1<<5);
		//E
				PTC->PDOR |= (0<<8);
				PTC->PDOR |= (0<<9);
				PTA->PDOR |= (1<<13);
		//SW
				PTC->PDOR |= (1<<4);
				PTC->PDOR |= (0<<5);
				PTC->PDOR |= (0<<6);
	}
}

void setCSOutput(void){
		//north
		if(FSM[CS].Out[17] == 1)
				PTC->PDOR |= (1<<13);
		else 
				PTC->PCOR |= (1<<13);
		
		if(FSM[CS].Out[16] == 1)
				PTC->PDOR |= (1<<16);
		else
				PTC->PCOR |= (1<<16);
		
		if(FSM[CS].Out[15] == 1)
				PTC->PDOR |= (1<<17);
		else
				PTC->PCOR |= (1<<17);
		//N/S Brt		
		if(FSM[CS].Out[14] == 1)
				PTA->PDOR |= (1<<12);
		else
				PTA->PCOR |= (1<<12);
		
		if(FSM[CS].Out[13] == 1)
				PTA->PDOR |= (1<<4);
		else
				PTA->PCOR |= (1<<4);
		
		if(FSM[CS].Out[12] == 1)
				PTA->PDOR |= (1<<5);
		else
				PTA->PCOR |= (1<<5);
		//E
		if(FSM[CS].Out[11] == 1)
				PTC->PDOR |= (1<<8);
		else
				PTC->PCOR |= (1<<8);
		
		if(FSM[CS].Out[10] == 1)
				PTC->PDOR |= (1<<9);
		else
				PTC->PCOR |= (1<<9);
		
		if(FSM[CS].Out[9] == 1)
				PTA->PDOR |= (1<<13);
		else
				PTA->PCOR |= (1<<13);
		//Bus
		if(FSM[CS].Out[8] == 1)
				PTC->PDOR |= (1<<10);
		else
				PTC->PCOR |= (1<<10);
		
		if(FSM[CS].Out[7] == 1)
				PTC->PDOR |= (1<<11);
		else
				PTC->PCOR |= (1<<11);
		
		if(FSM[CS].Out[6] == 1)
				PTC->PDOR |= (1<<12);
		else
				PTC->PCOR |= (1<<12);
		//WN
		if(FSM[CS].Out[5] == 1)
				PTC->PDOR |= (1<<7);
		else
				PTC->PCOR |= (1<<7);
		if(FSM[CS].Out[4] == 1)
				PTC->PDOR |= (1<<0);
		else
				PTC->PCOR |= (1<<0);
		if(FSM[CS].Out[3] == 1)
				PTC->PDOR |= (1<<3);
		else
				PTC->PCOR |= (1<<3);
		//SW
		if(FSM[CS].Out[2] == 1)
				PTC->PDOR |= (1<<4);
		else
				PTC->PCOR |= (1<<4);
		if(FSM[CS].Out[1] == 1)
				PTC->PDOR |= (1<<5);
		else
				PTC->PCOR |= (1<<5);
		
		if(FSM[CS].Out[0] == 1)
				PTC->PDOR |= (1<<6);
		else
			PTC->PCOR |= (1<<6);
}
int main(){
  
  init_switch();
  init_RGB_LEDs();

  CS = go_N_car_go_BRT_NS; // start state
  while(1) {
				setCSOutput();
				delay(FSM[CS].Time);
				CS = FSM[CS].Next;  
  }

}
